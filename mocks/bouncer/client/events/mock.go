// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/Polarishq/bouncer/client/events/events_iface.go

package mock_events

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	. "github.com/Polarishq/bouncer/client/events"
	reflect "reflect"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return _m.recorder
}

// GetEvents mocks base method
func (_m *MockClientInterface) GetEvents(params *GetEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventsOK, error) {
	ret := _m.ctrl.Call(_m, "GetEvents", params, authInfo)
	ret0, _ := ret[0].(*GetEventsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (_mr *MockClientInterfaceMockRecorder) GetEvents(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetEvents", reflect.TypeOf((*MockClientInterface)(nil).GetEvents), arg0, arg1)
}

// Events mocks base method
func (_m *MockClientInterface) Events(params *EventsParams, authInfo runtime.ClientAuthInfoWriter) (*EventsOK, error) {
	ret := _m.ctrl.Call(_m, "Events", params, authInfo)
	ret0, _ := ret[0].(*EventsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Events indicates an expected call of Events
func (_mr *MockClientInterfaceMockRecorder) Events(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Events", reflect.TypeOf((*MockClientInterface)(nil).Events), arg0, arg1)
}

// SetTransport mocks base method
func (_m *MockClientInterface) SetTransport(transport runtime.ClientTransport) {
	_m.ctrl.Call(_m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport
func (_mr *MockClientInterfaceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetTransport", reflect.TypeOf((*MockClientInterface)(nil).SetTransport), arg0)
}
